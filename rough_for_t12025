{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":90791,"databundleVersionId":10592855,"sourceType":"competition"},{"sourceId":10611966,"sourceType":"datasetVersion","datasetId":6569741}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# necessary imports.\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport math\n# from mpl_toolkits.mplot3d import Axes3D\n# import os\n# from sklearn.manifold import TSNE\nfrom sklearn.preprocessing import OrdinalEncoder, OneHotEncoder,StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n# from sklearn import linear_model\nfrom sklearn.linear_model import SGDClassifier,RidgeClassifier,LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay, precision_recall_curve,roc_curve, auc\nfrom sklearn.metrics import adjusted_rand_score, silhouette_score, davies_bouldin_score\nfrom sklearn.model_selection import cross_val_score,GridSearchCV\n# from sklearn.decomposition import PCA\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\n# from sklearn.feature_selection import SelectFromModel\nfrom sklearn.cluster import KMeans\nfrom scipy.stats import mode\nfrom sklearn.ensemble import *\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neural_network import MLPClassifier\n# from sklearn.feature_selection import mutual_info_classif\n# from sklearn.feature_selection import SelectKBest","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# reading the files.\ntrain=pd.read_csv(r'/kaggle/input/System-Threat-Forecaster/train.csv')\ntrain","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:47.185426Z","iopub.execute_input":"2025-03-03T14:51:47.185987Z","iopub.status.idle":"2025-03-03T14:51:48.455715Z","shell.execute_reply.started":"2025-03-03T14:51:47.185922Z","shell.execute_reply":"2025-03-03T14:51:48.454626Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"                              MachineID   ProductName EngineVersion  \\\n0      f541bae429089117c4aac39c90dd3416  win8defender   1.1.15200.1   \n1      dc2b14d9ce3a0ce4050bb640190f2ca5  win8defender   1.1.15100.1   \n2      fd20c5f010e9c5f91ad1c6b3e0da68a0  win8defender   1.1.15200.1   \n3      38711eae85eb77a72ec5dfdf27eb2a76  win8defender   1.1.15200.1   \n4      32607c9a543a9214e2c7e45800ed4849  win8defender   1.1.15200.1   \n...                                 ...           ...           ...   \n99995  a378b2196a7a1d8ee0d4f989ee46730e  win8defender   1.1.15200.1   \n99996  7f4433ca05d24b9bbdd3932f8b05e61f  win8defender   1.1.15100.1   \n99997  d6852dfff534e03d5ddfd3c7875ab072  win8defender   1.1.15200.1   \n99998  70a8dc682128c9ff78a3de5aea9dac74  win8defender   1.1.14901.4   \n99999  ad9c385b53f2ca788933a39603b84eda  win8defender   1.1.15000.2   \n\n             AppVersion SignatureVersion  IsBetaUser  RealTimeProtectionState  \\\n0       4.18.1807.18075     1.275.1003.0           0                      7.0   \n1       4.18.1807.18075     1.273.1465.0           0                      7.0   \n2       4.18.1807.18075     1.275.1546.0           0                      7.0   \n3      4.12.17007.18011     1.275.1141.0           0                      7.0   \n4        4.13.17134.228     1.275.1283.0           0                      7.0   \n...                 ...              ...         ...                      ...   \n99995   4.18.1807.18075     1.275.1582.0           0                      7.0   \n99996   4.18.1806.18062     1.273.1156.0           0                      7.0   \n99997   4.18.1807.18075      1.275.209.0           0                      7.0   \n99998  4.16.17656.18052      1.269.641.0           0                      7.0   \n99999   4.18.1806.18062     1.271.1003.0           0                      7.0   \n\n       IsPassiveModeEnabled  AntivirusConfigID  NumAntivirusProductsInstalled  \\\n0                         0            53447.0                            1.0   \n1                         0            53447.0                            1.0   \n2                         0            53447.0                            1.0   \n3                         0            46413.0                            2.0   \n4                         0            40466.0                            2.0   \n...                     ...                ...                            ...   \n99995                     0            68585.0                            2.0   \n99996                     0            11280.0                            2.0   \n99997                     0            53447.0                            1.0   \n99998                     0            53447.0                            1.0   \n99999                     0             7945.0                            2.0   \n\n       ...  IsSecureBootEnabled  IsVirtualDevice  IsTouchEnabled  \\\n0      ...                    0              0.0               1   \n1      ...                    1              0.0               0   \n2      ...                    0              0.0               0   \n3      ...                    1              0.0               0   \n4      ...                    0              0.0               0   \n...    ...                  ...              ...             ...   \n99995  ...                    0              0.0               0   \n99996  ...                    0              0.0               0   \n99997  ...                    1              0.0               0   \n99998  ...                    1              0.0               1   \n99999  ...                    1              0.0               0   \n\n       IsPenCapable  IsAlwaysOnAlwaysConnectedCapable  IsGamer  \\\n0                 0                               1.0      0.0   \n1                 0                               0.0      0.0   \n2                 0                               0.0      1.0   \n3                 0                               0.0      0.0   \n4                 0                               0.0      1.0   \n...             ...                               ...      ...   \n99995             0                               0.0      1.0   \n99996             0                               0.0      0.0   \n99997             0                               0.0      1.0   \n99998             1                               1.0      0.0   \n99999             0                               0.0      1.0   \n\n      RegionIdentifier               DateAS      DateOS  target  \n0                  6.0  2018-09-10 10:11:00  2018-04-17       0  \n1                 10.0  2018-08-16 00:01:00  2018-08-14       1  \n2                  6.0  2018-09-20 23:20:00  2018-09-11       1  \n3                 12.0  2018-09-14 00:32:00  2018-01-03       1  \n4                  7.0  2018-09-15 19:34:00  2018-09-11       0  \n...                ...                  ...         ...     ...  \n99995              7.0  2018-09-21 00:59:00  2018-09-20       0  \n99996              3.0  2018-08-10 07:23:00  2018-07-10       0  \n99997              1.0  2018-08-26 23:51:00  2018-03-13       1  \n99998              1.0  2018-06-04 17:13:00  2018-05-08       0  \n99999             11.0  2018-07-14 15:36:00  2018-08-14       0  \n\n[100000 rows x 76 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MachineID</th>\n      <th>ProductName</th>\n      <th>EngineVersion</th>\n      <th>AppVersion</th>\n      <th>SignatureVersion</th>\n      <th>IsBetaUser</th>\n      <th>RealTimeProtectionState</th>\n      <th>IsPassiveModeEnabled</th>\n      <th>AntivirusConfigID</th>\n      <th>NumAntivirusProductsInstalled</th>\n      <th>...</th>\n      <th>IsSecureBootEnabled</th>\n      <th>IsVirtualDevice</th>\n      <th>IsTouchEnabled</th>\n      <th>IsPenCapable</th>\n      <th>IsAlwaysOnAlwaysConnectedCapable</th>\n      <th>IsGamer</th>\n      <th>RegionIdentifier</th>\n      <th>DateAS</th>\n      <th>DateOS</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>f541bae429089117c4aac39c90dd3416</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.18.1807.18075</td>\n      <td>1.275.1003.0</td>\n      <td>0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>53447.0</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>2018-09-10 10:11:00</td>\n      <td>2018-04-17</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>dc2b14d9ce3a0ce4050bb640190f2ca5</td>\n      <td>win8defender</td>\n      <td>1.1.15100.1</td>\n      <td>4.18.1807.18075</td>\n      <td>1.273.1465.0</td>\n      <td>0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>53447.0</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>10.0</td>\n      <td>2018-08-16 00:01:00</td>\n      <td>2018-08-14</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>fd20c5f010e9c5f91ad1c6b3e0da68a0</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.18.1807.18075</td>\n      <td>1.275.1546.0</td>\n      <td>0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>53447.0</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>6.0</td>\n      <td>2018-09-20 23:20:00</td>\n      <td>2018-09-11</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>38711eae85eb77a72ec5dfdf27eb2a76</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.12.17007.18011</td>\n      <td>1.275.1141.0</td>\n      <td>0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>46413.0</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>12.0</td>\n      <td>2018-09-14 00:32:00</td>\n      <td>2018-01-03</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32607c9a543a9214e2c7e45800ed4849</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.13.17134.228</td>\n      <td>1.275.1283.0</td>\n      <td>0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>40466.0</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>2018-09-15 19:34:00</td>\n      <td>2018-09-11</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>99995</th>\n      <td>a378b2196a7a1d8ee0d4f989ee46730e</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.18.1807.18075</td>\n      <td>1.275.1582.0</td>\n      <td>0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>68585.0</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>2018-09-21 00:59:00</td>\n      <td>2018-09-20</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>99996</th>\n      <td>7f4433ca05d24b9bbdd3932f8b05e61f</td>\n      <td>win8defender</td>\n      <td>1.1.15100.1</td>\n      <td>4.18.1806.18062</td>\n      <td>1.273.1156.0</td>\n      <td>0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>11280.0</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>2018-08-10 07:23:00</td>\n      <td>2018-07-10</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>99997</th>\n      <td>d6852dfff534e03d5ddfd3c7875ab072</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.18.1807.18075</td>\n      <td>1.275.209.0</td>\n      <td>0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>53447.0</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2018-08-26 23:51:00</td>\n      <td>2018-03-13</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>99998</th>\n      <td>70a8dc682128c9ff78a3de5aea9dac74</td>\n      <td>win8defender</td>\n      <td>1.1.14901.4</td>\n      <td>4.16.17656.18052</td>\n      <td>1.269.641.0</td>\n      <td>0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>53447.0</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2018-06-04 17:13:00</td>\n      <td>2018-05-08</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>99999</th>\n      <td>ad9c385b53f2ca788933a39603b84eda</td>\n      <td>win8defender</td>\n      <td>1.1.15000.2</td>\n      <td>4.18.1806.18062</td>\n      <td>1.271.1003.0</td>\n      <td>0</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>7945.0</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>11.0</td>\n      <td>2018-07-14 15:36:00</td>\n      <td>2018-08-14</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>100000 rows × 76 columns</p>\n</div>"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:48.457468Z","iopub.execute_input":"2025-03-03T14:51:48.457914Z","iopub.status.idle":"2025-03-03T14:51:48.464142Z","shell.execute_reply.started":"2025-03-03T14:51:48.457868Z","shell.execute_reply":"2025-03-03T14:51:48.462961Z"}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"(100000, 76)"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"nans = list(zip(train.columns, train.isna().sum()))\nnans_sorted = sorted(nans, key=lambda x: x[1], reverse=True)\nnans_sorted","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:48.466711Z","iopub.execute_input":"2025-03-03T14:51:48.467197Z","iopub.status.idle":"2025-03-03T14:51:48.637661Z","shell.execute_reply.started":"2025-03-03T14:51:48.467156Z","shell.execute_reply":"2025-03-03T14:51:48.636291Z"}},"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"[('SMode', 981),\n ('CityID', 623),\n ('IsGamer', 559),\n ('RegionIdentifier', 559),\n ('InternalBatteryNumberOfCharges', 515),\n ('FirmwareManufacturerID', 376),\n ('FirmwareVersionID', 334),\n ('IsFlightsDisabled', 326),\n ('OEMModelID', 228),\n ('OEMNameID', 212),\n ('FirewallEnabled', 166),\n ('TotalPhysicalRAMMB', 151),\n ('IsAlwaysOnAlwaysConnectedCapable', 134),\n ('OSInstallLanguageID', 113),\n ('PrimaryDiskCapacityMB', 110),\n ('SystemVolumeCapacityMB', 110),\n ('IEVersionID', 107),\n ('ProcessorCoreCount', 85),\n ('ProcessorManufacturerID', 85),\n ('ProcessorModelID', 85),\n ('AntivirusConfigID', 76),\n ('NumAntivirusProductsInstalled', 76),\n ('NumAntivirusProductsEnabled', 76),\n ('IsSystemProtected', 76),\n ('PrimaryDisplayDiagonalInches', 72),\n ('PrimaryDisplayResolutionHorizontal', 72),\n ('PrimaryDisplayResolutionVertical', 72),\n ('RealTimeProtectionState', 66),\n ('DateOS', 24),\n ('PrimaryDiskType', 23),\n ('IsVirtualDevice', 20),\n ('EnableLUA', 19),\n ('ChassisType', 2),\n ('MachineID', 0),\n ('ProductName', 0),\n ('EngineVersion', 0),\n ('AppVersion', 0),\n ('SignatureVersion', 0),\n ('IsBetaUser', 0),\n ('IsPassiveModeEnabled', 0),\n ('HasTpm', 0),\n ('CountryID', 0),\n ('GeoRegionID', 0),\n ('LocaleEnglishNameID', 0),\n ('PlatformType', 0),\n ('Processor', 0),\n ('OSVersion', 0),\n ('OSBuildNumber', 0),\n ('OSProductSuite', 0),\n ('OsPlatformSubRelease', 0),\n ('OSBuildLab', 0),\n ('SKUEditionName', 0),\n ('AutoSampleSubmissionEnabled', 0),\n ('MDC2FormFactor', 0),\n ('DeviceFamily', 0),\n ('HasOpticalDiskDrive', 0),\n ('PowerPlatformRole', 0),\n ('NumericOSVersion', 0),\n ('OSArchitecture', 0),\n ('OSBranch', 0),\n ('OSBuildNumberOnly', 0),\n ('OSBuildRevisionOnly', 0),\n ('OSEdition', 0),\n ('OSSkuFriendlyName', 0),\n ('OSInstallType', 0),\n ('OSUILocaleID', 0),\n ('AutoUpdateOptionsName', 0),\n ('IsPortableOS', 0),\n ('OSGenuineState', 0),\n ('LicenseActivationChannel', 0),\n ('FlightRing', 0),\n ('IsSecureBootEnabled', 0),\n ('IsTouchEnabled', 0),\n ('IsPenCapable', 0),\n ('DateAS', 0),\n ('target', 0)]"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"target=train['target']\ntrain.drop('target',inplace=True,axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:48.639657Z","iopub.execute_input":"2025-03-03T14:51:48.640093Z","iopub.status.idle":"2025-03-03T14:51:48.677671Z","shell.execute_reply.started":"2025-03-03T14:51:48.640046Z","shell.execute_reply":"2025-03-03T14:51:48.676647Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"train.iloc[0]['ProductName']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:48.678659Z","iopub.execute_input":"2025-03-03T14:51:48.678944Z","iopub.status.idle":"2025-03-03T14:51:48.685726Z","shell.execute_reply.started":"2025-03-03T14:51:48.678920Z","shell.execute_reply":"2025-03-03T14:51:48.684504Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"'win8defender'"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"train.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:48.686767Z","iopub.execute_input":"2025-03-03T14:51:48.687108Z","iopub.status.idle":"2025-03-03T14:51:48.868825Z","shell.execute_reply.started":"2025-03-03T14:51:48.687080Z","shell.execute_reply":"2025-03-03T14:51:48.867750Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 100000 entries, 0 to 99999\nData columns (total 75 columns):\n #   Column                              Non-Null Count   Dtype  \n---  ------                              --------------   -----  \n 0   MachineID                           100000 non-null  object \n 1   ProductName                         100000 non-null  object \n 2   EngineVersion                       100000 non-null  object \n 3   AppVersion                          100000 non-null  object \n 4   SignatureVersion                    100000 non-null  object \n 5   IsBetaUser                          100000 non-null  int64  \n 6   RealTimeProtectionState             99934 non-null   float64\n 7   IsPassiveModeEnabled                100000 non-null  int64  \n 8   AntivirusConfigID                   99924 non-null   float64\n 9   NumAntivirusProductsInstalled       99924 non-null   float64\n 10  NumAntivirusProductsEnabled         99924 non-null   float64\n 11  HasTpm                              100000 non-null  int64  \n 12  CountryID                           100000 non-null  int64  \n 13  CityID                              99377 non-null   float64\n 14  GeoRegionID                         100000 non-null  float64\n 15  LocaleEnglishNameID                 100000 non-null  int64  \n 16  PlatformType                        100000 non-null  object \n 17  Processor                           100000 non-null  object \n 18  OSVersion                           100000 non-null  object \n 19  OSBuildNumber                       100000 non-null  int64  \n 20  OSProductSuite                      100000 non-null  int64  \n 21  OsPlatformSubRelease                100000 non-null  object \n 22  OSBuildLab                          100000 non-null  object \n 23  SKUEditionName                      100000 non-null  object \n 24  IsSystemProtected                   99924 non-null   float64\n 25  AutoSampleSubmissionEnabled         100000 non-null  int64  \n 26  SMode                               99019 non-null   float64\n 27  IEVersionID                         99893 non-null   float64\n 28  FirewallEnabled                     99834 non-null   float64\n 29  EnableLUA                           99981 non-null   float64\n 30  MDC2FormFactor                      100000 non-null  object \n 31  DeviceFamily                        100000 non-null  object \n 32  OEMNameID                           99788 non-null   float64\n 33  OEMModelID                          99772 non-null   float64\n 34  ProcessorCoreCount                  99915 non-null   float64\n 35  ProcessorManufacturerID             99915 non-null   float64\n 36  ProcessorModelID                    99915 non-null   float64\n 37  PrimaryDiskCapacityMB               99890 non-null   float64\n 38  PrimaryDiskType                     99977 non-null   object \n 39  SystemVolumeCapacityMB              99890 non-null   float64\n 40  HasOpticalDiskDrive                 100000 non-null  int64  \n 41  TotalPhysicalRAMMB                  99849 non-null   float64\n 42  ChassisType                         99998 non-null   object \n 43  PrimaryDisplayDiagonalInches        99928 non-null   float64\n 44  PrimaryDisplayResolutionHorizontal  99928 non-null   float64\n 45  PrimaryDisplayResolutionVertical    99928 non-null   float64\n 46  PowerPlatformRole                   100000 non-null  object \n 47  InternalBatteryNumberOfCharges      99485 non-null   float64\n 48  NumericOSVersion                    100000 non-null  object \n 49  OSArchitecture                      100000 non-null  object \n 50  OSBranch                            100000 non-null  object \n 51  OSBuildNumberOnly                   100000 non-null  int64  \n 52  OSBuildRevisionOnly                 100000 non-null  int64  \n 53  OSEdition                           100000 non-null  object \n 54  OSSkuFriendlyName                   100000 non-null  object \n 55  OSInstallType                       100000 non-null  object \n 56  OSInstallLanguageID                 99887 non-null   float64\n 57  OSUILocaleID                        100000 non-null  int64  \n 58  AutoUpdateOptionsName               100000 non-null  object \n 59  IsPortableOS                        100000 non-null  int64  \n 60  OSGenuineState                      100000 non-null  object \n 61  LicenseActivationChannel            100000 non-null  object \n 62  IsFlightsDisabled                   99674 non-null   float64\n 63  FlightRing                          100000 non-null  object \n 64  FirmwareManufacturerID              99624 non-null   float64\n 65  FirmwareVersionID                   99666 non-null   float64\n 66  IsSecureBootEnabled                 100000 non-null  int64  \n 67  IsVirtualDevice                     99980 non-null   float64\n 68  IsTouchEnabled                      100000 non-null  int64  \n 69  IsPenCapable                        100000 non-null  int64  \n 70  IsAlwaysOnAlwaysConnectedCapable    99866 non-null   float64\n 71  IsGamer                             99441 non-null   float64\n 72  RegionIdentifier                    99441 non-null   float64\n 73  DateAS                              100000 non-null  object \n 74  DateOS                              99976 non-null   object \ndtypes: float64(31), int64(16), object(28)\nmemory usage: 57.2+ MB\n","output_type":"stream"}],"execution_count":42},{"cell_type":"markdown","source":"# Huge dataset","metadata":{}},{"cell_type":"code","source":"train.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:48.870012Z","iopub.execute_input":"2025-03-03T14:51:48.870399Z","iopub.status.idle":"2025-03-03T14:51:49.140694Z","shell.execute_reply.started":"2025-03-03T14:51:48.870362Z","shell.execute_reply":"2025-03-03T14:51:49.139472Z"}},"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"       IsBetaUser  RealTimeProtectionState  IsPassiveModeEnabled  \\\ncount    100000.0             99934.000000         100000.000000   \nmean          0.0                 6.848430              0.017620   \nstd           0.0                 1.015166              0.131566   \nmin           0.0                 0.000000              0.000000   \n25%           0.0                 7.000000              0.000000   \n50%           0.0                 7.000000              0.000000   \n75%           0.0                 7.000000              0.000000   \nmax           0.0                 8.000000              1.000000   \n\n       AntivirusConfigID  NumAntivirusProductsInstalled  \\\ncount       99924.000000                   99924.000000   \nmean        47975.710440                       1.326528   \nstd         13803.321533                       0.520681   \nmin            39.000000                       1.000000   \n25%         49480.000000                       1.000000   \n50%         53447.000000                       1.000000   \n75%         53447.000000                       2.000000   \nmax         70490.000000                       5.000000   \n\n       NumAntivirusProductsEnabled         HasTpm      CountryID  \\\ncount                 99924.000000  100000.000000  100000.000000   \nmean                      1.018264       0.996780     108.078790   \nstd                       0.155291       0.056654      63.062151   \nmin                       0.000000       0.000000       1.000000   \n25%                       1.000000       1.000000      51.000000   \n50%                       1.000000       1.000000      97.000000   \n75%                       1.000000       1.000000     162.000000   \nmax                       4.000000       1.000000     222.000000   \n\n              CityID    GeoRegionID  ...  IsFlightsDisabled  \\\ncount   99377.000000  100000.000000  ...            99674.0   \nmean    81029.938587     169.741630  ...                0.0   \nstd     48944.027074      89.188929  ...                0.0   \nmin         7.000000       1.000000  ...                0.0   \n25%     36694.000000      89.000000  ...                0.0   \n50%     82373.000000     181.000000  ...                0.0   \n75%    122835.000000     267.000000  ...                0.0   \nmax    167957.000000     296.000000  ...                0.0   \n\n       FirmwareManufacturerID  FirmwareVersionID  IsSecureBootEnabled  \\\ncount            99624.000000       99666.000000        100000.000000   \nmean               401.987613       32942.648044             0.495690   \nstd                221.318891       21151.970827             0.499984   \nmin                  2.000000         121.000000             0.000000   \n25%                142.000000       13020.000000             0.000000   \n50%                500.000000       33066.000000             0.000000   \n75%                556.000000       52357.000000             1.000000   \nmax               1083.000000       72091.000000             1.000000   \n\n       IsVirtualDevice  IsTouchEnabled   IsPenCapable  \\\ncount     99980.000000   100000.000000  100000.000000   \nmean          0.003841        0.128470       0.040580   \nstd           0.061855        0.334614       0.197316   \nmin           0.000000        0.000000       0.000000   \n25%           0.000000        0.000000       0.000000   \n50%           0.000000        0.000000       0.000000   \n75%           0.000000        0.000000       0.000000   \nmax           1.000000        1.000000       1.000000   \n\n       IsAlwaysOnAlwaysConnectedCapable       IsGamer  RegionIdentifier  \ncount                      99866.000000  99441.000000      99441.000000  \nmean                           0.058398      0.296668          7.875866  \nstd                            0.234496      0.456791          4.562533  \nmin                            0.000000      0.000000          1.000000  \n25%                            0.000000      0.000000          3.000000  \n50%                            0.000000      0.000000         10.000000  \n75%                            0.000000      1.000000         11.000000  \nmax                            1.000000      1.000000         15.000000  \n\n[8 rows x 47 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>IsBetaUser</th>\n      <th>RealTimeProtectionState</th>\n      <th>IsPassiveModeEnabled</th>\n      <th>AntivirusConfigID</th>\n      <th>NumAntivirusProductsInstalled</th>\n      <th>NumAntivirusProductsEnabled</th>\n      <th>HasTpm</th>\n      <th>CountryID</th>\n      <th>CityID</th>\n      <th>GeoRegionID</th>\n      <th>...</th>\n      <th>IsFlightsDisabled</th>\n      <th>FirmwareManufacturerID</th>\n      <th>FirmwareVersionID</th>\n      <th>IsSecureBootEnabled</th>\n      <th>IsVirtualDevice</th>\n      <th>IsTouchEnabled</th>\n      <th>IsPenCapable</th>\n      <th>IsAlwaysOnAlwaysConnectedCapable</th>\n      <th>IsGamer</th>\n      <th>RegionIdentifier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>100000.0</td>\n      <td>99934.000000</td>\n      <td>100000.000000</td>\n      <td>99924.000000</td>\n      <td>99924.000000</td>\n      <td>99924.000000</td>\n      <td>100000.000000</td>\n      <td>100000.000000</td>\n      <td>99377.000000</td>\n      <td>100000.000000</td>\n      <td>...</td>\n      <td>99674.0</td>\n      <td>99624.000000</td>\n      <td>99666.000000</td>\n      <td>100000.000000</td>\n      <td>99980.000000</td>\n      <td>100000.000000</td>\n      <td>100000.000000</td>\n      <td>99866.000000</td>\n      <td>99441.000000</td>\n      <td>99441.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.0</td>\n      <td>6.848430</td>\n      <td>0.017620</td>\n      <td>47975.710440</td>\n      <td>1.326528</td>\n      <td>1.018264</td>\n      <td>0.996780</td>\n      <td>108.078790</td>\n      <td>81029.938587</td>\n      <td>169.741630</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>401.987613</td>\n      <td>32942.648044</td>\n      <td>0.495690</td>\n      <td>0.003841</td>\n      <td>0.128470</td>\n      <td>0.040580</td>\n      <td>0.058398</td>\n      <td>0.296668</td>\n      <td>7.875866</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.0</td>\n      <td>1.015166</td>\n      <td>0.131566</td>\n      <td>13803.321533</td>\n      <td>0.520681</td>\n      <td>0.155291</td>\n      <td>0.056654</td>\n      <td>63.062151</td>\n      <td>48944.027074</td>\n      <td>89.188929</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>221.318891</td>\n      <td>21151.970827</td>\n      <td>0.499984</td>\n      <td>0.061855</td>\n      <td>0.334614</td>\n      <td>0.197316</td>\n      <td>0.234496</td>\n      <td>0.456791</td>\n      <td>4.562533</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>39.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>7.000000</td>\n      <td>1.000000</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>2.000000</td>\n      <td>121.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.0</td>\n      <td>7.000000</td>\n      <td>0.000000</td>\n      <td>49480.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>51.000000</td>\n      <td>36694.000000</td>\n      <td>89.000000</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>142.000000</td>\n      <td>13020.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.0</td>\n      <td>7.000000</td>\n      <td>0.000000</td>\n      <td>53447.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>97.000000</td>\n      <td>82373.000000</td>\n      <td>181.000000</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>500.000000</td>\n      <td>33066.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>10.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.0</td>\n      <td>7.000000</td>\n      <td>0.000000</td>\n      <td>53447.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>162.000000</td>\n      <td>122835.000000</td>\n      <td>267.000000</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>556.000000</td>\n      <td>52357.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>11.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>0.0</td>\n      <td>8.000000</td>\n      <td>1.000000</td>\n      <td>70490.000000</td>\n      <td>5.000000</td>\n      <td>4.000000</td>\n      <td>1.000000</td>\n      <td>222.000000</td>\n      <td>167957.000000</td>\n      <td>296.000000</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1083.000000</td>\n      <td>72091.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>15.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 47 columns</p>\n</div>"},"metadata":{}}],"execution_count":43},{"cell_type":"markdown","source":"isBetaUser,antivirus_config_id, machien_id, product name is a useless column ","metadata":{}},{"cell_type":"code","source":"train['IsBetaUser'].unique()\n# there is no unique value here, so we can remove this column.","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:49.141901Z","iopub.execute_input":"2025-03-03T14:51:49.142220Z","iopub.status.idle":"2025-03-03T14:51:49.149752Z","shell.execute_reply.started":"2025-03-03T14:51:49.142191Z","shell.execute_reply":"2025-03-03T14:51:49.148195Z"}},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"array([0])"},"metadata":{}}],"execution_count":44},{"cell_type":"markdown","source":"## reduced the dataset via OpenRefine","metadata":{}},{"cell_type":"code","source":"trian=pd.read_csv(r\"/kaggle/input/train-cleaned/train_reduced.csv\")\ntrian","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:49.153756Z","iopub.execute_input":"2025-03-03T14:51:49.154092Z","iopub.status.idle":"2025-03-03T14:51:50.223319Z","shell.execute_reply.started":"2025-03-03T14:51:49.154063Z","shell.execute_reply":"2025-03-03T14:51:50.222176Z"}},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"                              MachineID   ProductName EngineVersion  \\\n0      f541bae429089117c4aac39c90dd3416  win8defender   1.1.15200.1   \n1      dc2b14d9ce3a0ce4050bb640190f2ca5  win8defender   1.1.15100.1   \n2      fd20c5f010e9c5f91ad1c6b3e0da68a0  win8defender   1.1.15200.1   \n3      38711eae85eb77a72ec5dfdf27eb2a76  win8defender   1.1.15200.1   \n4      32607c9a543a9214e2c7e45800ed4849  win8defender   1.1.15200.1   \n...                                 ...           ...           ...   \n99995  a378b2196a7a1d8ee0d4f989ee46730e  win8defender   1.1.15200.1   \n99996  7f4433ca05d24b9bbdd3932f8b05e61f  win8defender   1.1.15100.1   \n99997  d6852dfff534e03d5ddfd3c7875ab072  win8defender   1.1.15200.1   \n99998  70a8dc682128c9ff78a3de5aea9dac74  win8defender   1.1.14901.4   \n99999  ad9c385b53f2ca788933a39603b84eda  win8defender   1.1.15000.2   \n\n             AppVersion  RealTimeProtectionState  IsPassiveModeEnabled  \\\n0       4.18.1807.18075                      7.0                     0   \n1       4.18.1807.18075                      7.0                     0   \n2       4.18.1807.18075                      7.0                     0   \n3      4.12.17007.18011                      7.0                     0   \n4        4.13.17134.228                      7.0                     0   \n...                 ...                      ...                   ...   \n99995   4.18.1807.18075                      7.0                     0   \n99996   4.18.1806.18062                      7.0                     0   \n99997   4.18.1807.18075                      7.0                     0   \n99998  4.16.17656.18052                      7.0                     0   \n99999   4.18.1806.18062                      7.0                     0   \n\n       AntivirusConfigID  NumAntivirusProductsInstalled  \\\n0                53447.0                            1.0   \n1                53447.0                            1.0   \n2                53447.0                            1.0   \n3                46413.0                            2.0   \n4                40466.0                            2.0   \n...                  ...                            ...   \n99995            68585.0                            2.0   \n99996            11280.0                            2.0   \n99997            53447.0                            1.0   \n99998            53447.0                            1.0   \n99999             7945.0                            2.0   \n\n       NumAntivirusProductsEnabled  HasTpm  ...  IsSecureBootEnabled  \\\n0                              1.0       1  ...                    0   \n1                              1.0       1  ...                    1   \n2                              1.0       1  ...                    0   \n3                              1.0       1  ...                    1   \n4                              1.0       1  ...                    0   \n...                            ...     ...  ...                  ...   \n99995                          1.0       1  ...                    0   \n99996                          1.0       1  ...                    0   \n99997                          1.0       1  ...                    1   \n99998                          1.0       1  ...                    1   \n99999                          1.0       1  ...                    1   \n\n       IsVirtualDevice  IsTouchEnabled  IsPenCapable  \\\n0                  0.0               1             0   \n1                  0.0               0             0   \n2                  0.0               0             0   \n3                  0.0               0             0   \n4                  0.0               0             0   \n...                ...             ...           ...   \n99995              0.0               0             0   \n99996              0.0               0             0   \n99997              0.0               0             0   \n99998              0.0               1             1   \n99999              0.0               0             0   \n\n      IsAlwaysOnAlwaysConnectedCapable IsGamer RegionIdentifier  \\\n0                                  1.0     0.0              6.0   \n1                                  0.0     0.0             10.0   \n2                                  0.0     1.0              6.0   \n3                                  0.0     0.0             12.0   \n4                                  0.0     1.0              7.0   \n...                                ...     ...              ...   \n99995                              0.0     1.0              7.0   \n99996                              0.0     0.0              3.0   \n99997                              0.0     1.0              1.0   \n99998                              1.0     0.0              1.0   \n99999                              0.0     1.0             11.0   \n\n                    DateAS      DateOS target  \n0      2018-09-10 10:11:00  2018-04-17      0  \n1      2018-08-16 00:01:00  2018-08-14      1  \n2      2018-09-20 23:20:00  2018-09-11      1  \n3      2018-09-14 00:32:00  2018-01-03      1  \n4      2018-09-15 19:34:00  2018-09-11      0  \n...                    ...         ...    ...  \n99995  2018-09-21 00:59:00  2018-09-20      0  \n99996  2018-08-10 07:23:00  2018-07-10      0  \n99997  2018-08-26 23:51:00  2018-03-13      1  \n99998  2018-06-04 17:13:00  2018-05-08      0  \n99999  2018-07-14 15:36:00  2018-08-14      0  \n\n[100000 rows x 67 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MachineID</th>\n      <th>ProductName</th>\n      <th>EngineVersion</th>\n      <th>AppVersion</th>\n      <th>RealTimeProtectionState</th>\n      <th>IsPassiveModeEnabled</th>\n      <th>AntivirusConfigID</th>\n      <th>NumAntivirusProductsInstalled</th>\n      <th>NumAntivirusProductsEnabled</th>\n      <th>HasTpm</th>\n      <th>...</th>\n      <th>IsSecureBootEnabled</th>\n      <th>IsVirtualDevice</th>\n      <th>IsTouchEnabled</th>\n      <th>IsPenCapable</th>\n      <th>IsAlwaysOnAlwaysConnectedCapable</th>\n      <th>IsGamer</th>\n      <th>RegionIdentifier</th>\n      <th>DateAS</th>\n      <th>DateOS</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>f541bae429089117c4aac39c90dd3416</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.18.1807.18075</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>53447.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>2018-09-10 10:11:00</td>\n      <td>2018-04-17</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>dc2b14d9ce3a0ce4050bb640190f2ca5</td>\n      <td>win8defender</td>\n      <td>1.1.15100.1</td>\n      <td>4.18.1807.18075</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>53447.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>10.0</td>\n      <td>2018-08-16 00:01:00</td>\n      <td>2018-08-14</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>fd20c5f010e9c5f91ad1c6b3e0da68a0</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.18.1807.18075</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>53447.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>6.0</td>\n      <td>2018-09-20 23:20:00</td>\n      <td>2018-09-11</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>38711eae85eb77a72ec5dfdf27eb2a76</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.12.17007.18011</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>46413.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>12.0</td>\n      <td>2018-09-14 00:32:00</td>\n      <td>2018-01-03</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32607c9a543a9214e2c7e45800ed4849</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.13.17134.228</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>40466.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>2018-09-15 19:34:00</td>\n      <td>2018-09-11</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>99995</th>\n      <td>a378b2196a7a1d8ee0d4f989ee46730e</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.18.1807.18075</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>68585.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>2018-09-21 00:59:00</td>\n      <td>2018-09-20</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>99996</th>\n      <td>7f4433ca05d24b9bbdd3932f8b05e61f</td>\n      <td>win8defender</td>\n      <td>1.1.15100.1</td>\n      <td>4.18.1806.18062</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>11280.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>2018-08-10 07:23:00</td>\n      <td>2018-07-10</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>99997</th>\n      <td>d6852dfff534e03d5ddfd3c7875ab072</td>\n      <td>win8defender</td>\n      <td>1.1.15200.1</td>\n      <td>4.18.1807.18075</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>53447.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2018-08-26 23:51:00</td>\n      <td>2018-03-13</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>99998</th>\n      <td>70a8dc682128c9ff78a3de5aea9dac74</td>\n      <td>win8defender</td>\n      <td>1.1.14901.4</td>\n      <td>4.16.17656.18052</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>53447.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2018-06-04 17:13:00</td>\n      <td>2018-05-08</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>99999</th>\n      <td>ad9c385b53f2ca788933a39603b84eda</td>\n      <td>win8defender</td>\n      <td>1.1.15000.2</td>\n      <td>4.18.1806.18062</td>\n      <td>7.0</td>\n      <td>0</td>\n      <td>7945.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>11.0</td>\n      <td>2018-07-14 15:36:00</td>\n      <td>2018-08-14</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>100000 rows × 67 columns</p>\n</div>"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"trian.drop(\"MachineID\",inplace=True,axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.225227Z","iopub.execute_input":"2025-03-03T14:51:50.225571Z","iopub.status.idle":"2025-03-03T14:51:50.257045Z","shell.execute_reply.started":"2025-03-03T14:51:50.225509Z","shell.execute_reply":"2025-03-03T14:51:50.255909Z"}},"outputs":[],"execution_count":46},{"cell_type":"code","source":"trian['ProductName'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.258256Z","iopub.execute_input":"2025-03-03T14:51:50.258694Z","iopub.status.idle":"2025-03-03T14:51:50.271687Z","shell.execute_reply.started":"2025-03-03T14:51:50.258652Z","shell.execute_reply":"2025-03-03T14:51:50.270411Z"}},"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"array(['win8defender', 'mse'], dtype=object)"},"metadata":{}}],"execution_count":47},{"cell_type":"code","source":"trian['DateAS'] = pd.to_datetime(trian['DateAS'])\ntrian['DateOS']=pd.to_datetime(trian['DateOS'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.273236Z","iopub.execute_input":"2025-03-03T14:51:50.273559Z","iopub.status.idle":"2025-03-03T14:51:50.319382Z","shell.execute_reply.started":"2025-03-03T14:51:50.273513Z","shell.execute_reply":"2025-03-03T14:51:50.318334Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"nans = list(zip(trian.columns, trian.isna().sum()))\nnans_sorted = sorted(nans, key=lambda x: x[1], reverse=True)\nnans_sorted","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.320483Z","iopub.execute_input":"2025-03-03T14:51:50.320794Z","iopub.status.idle":"2025-03-03T14:51:50.442829Z","shell.execute_reply.started":"2025-03-03T14:51:50.320769Z","shell.execute_reply":"2025-03-03T14:51:50.441809Z"}},"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"[('SMode', 981),\n ('CityID', 623),\n ('IsGamer', 559),\n ('RegionIdentifier', 559),\n ('FirmwareManufacturerID', 376),\n ('FirmwareVersionID', 334),\n ('OEMModelID', 228),\n ('OEMNameID', 212),\n ('FirewallEnabled', 166),\n ('TotalPhysicalRAMMB', 151),\n ('IsAlwaysOnAlwaysConnectedCapable', 134),\n ('OSInstallLanguageID', 113),\n ('PrimaryDiskCapacityMB', 110),\n ('SystemVolumeCapacityMB', 110),\n ('IEVersionID', 107),\n ('ProcessorCoreCount', 85),\n ('ProcessorManufacturerID', 85),\n ('ProcessorModelID', 85),\n ('AntivirusConfigID', 76),\n ('NumAntivirusProductsInstalled', 76),\n ('NumAntivirusProductsEnabled', 76),\n ('IsSystemProtected', 76),\n ('PrimaryDisplayResolutionHorizontal', 72),\n ('PrimaryDisplayResolutionVertical', 72),\n ('RealTimeProtectionState', 66),\n ('DateOS', 24),\n ('PrimaryDiskType', 23),\n ('IsVirtualDevice', 20),\n ('EnableLUA', 19),\n ('ProductName', 0),\n ('EngineVersion', 0),\n ('AppVersion', 0),\n ('IsPassiveModeEnabled', 0),\n ('HasTpm', 0),\n ('CountryID', 0),\n ('GeoRegionID', 0),\n ('LocaleEnglishNameID', 0),\n ('PlatformType', 0),\n ('Processor', 0),\n ('OSVersion', 0),\n ('OSBuildNumber', 0),\n ('OSProductSuite', 0),\n ('SKUEditionName', 0),\n ('AutoSampleSubmissionEnabled', 0),\n ('MDC2FormFactor', 0),\n ('DeviceFamily', 0),\n ('HasOpticalDiskDrive', 0),\n ('PowerPlatformRole', 0),\n ('NumericOSVersion', 0),\n ('OSArchitecture', 0),\n ('OSBranch', 0),\n ('OSBuildNumberOnly', 0),\n ('OSBuildRevisionOnly', 0),\n ('OSEdition', 0),\n ('OSInstallType', 0),\n ('OSUILocaleID', 0),\n ('AutoUpdateOptionsName', 0),\n ('IsPortableOS', 0),\n ('OSGenuineState', 0),\n ('LicenseActivationChannel', 0),\n ('FlightRing', 0),\n ('IsSecureBootEnabled', 0),\n ('IsTouchEnabled', 0),\n ('IsPenCapable', 0),\n ('DateAS', 0),\n ('target', 0)]"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"trian.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.443880Z","iopub.execute_input":"2025-03-03T14:51:50.444302Z","iopub.status.idle":"2025-03-03T14:51:50.571521Z","shell.execute_reply.started":"2025-03-03T14:51:50.444261Z","shell.execute_reply":"2025-03-03T14:51:50.570281Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 100000 entries, 0 to 99999\nData columns (total 66 columns):\n #   Column                              Non-Null Count   Dtype         \n---  ------                              --------------   -----         \n 0   ProductName                         100000 non-null  object        \n 1   EngineVersion                       100000 non-null  object        \n 2   AppVersion                          100000 non-null  object        \n 3   RealTimeProtectionState             99934 non-null   float64       \n 4   IsPassiveModeEnabled                100000 non-null  int64         \n 5   AntivirusConfigID                   99924 non-null   float64       \n 6   NumAntivirusProductsInstalled       99924 non-null   float64       \n 7   NumAntivirusProductsEnabled         99924 non-null   float64       \n 8   HasTpm                              100000 non-null  int64         \n 9   CountryID                           100000 non-null  int64         \n 10  CityID                              99377 non-null   float64       \n 11  GeoRegionID                         100000 non-null  float64       \n 12  LocaleEnglishNameID                 100000 non-null  int64         \n 13  PlatformType                        100000 non-null  object        \n 14  Processor                           100000 non-null  object        \n 15  OSVersion                           100000 non-null  object        \n 16  OSBuildNumber                       100000 non-null  int64         \n 17  OSProductSuite                      100000 non-null  int64         \n 18  SKUEditionName                      100000 non-null  object        \n 19  IsSystemProtected                   99924 non-null   float64       \n 20  AutoSampleSubmissionEnabled         100000 non-null  int64         \n 21  SMode                               99019 non-null   float64       \n 22  IEVersionID                         99893 non-null   float64       \n 23  FirewallEnabled                     99834 non-null   float64       \n 24  EnableLUA                           99981 non-null   float64       \n 25  MDC2FormFactor                      100000 non-null  object        \n 26  DeviceFamily                        100000 non-null  object        \n 27  OEMNameID                           99788 non-null   float64       \n 28  OEMModelID                          99772 non-null   float64       \n 29  ProcessorCoreCount                  99915 non-null   float64       \n 30  ProcessorManufacturerID             99915 non-null   float64       \n 31  ProcessorModelID                    99915 non-null   float64       \n 32  PrimaryDiskCapacityMB               99890 non-null   float64       \n 33  PrimaryDiskType                     99977 non-null   object        \n 34  SystemVolumeCapacityMB              99890 non-null   float64       \n 35  HasOpticalDiskDrive                 100000 non-null  int64         \n 36  TotalPhysicalRAMMB                  99849 non-null   float64       \n 37  PrimaryDisplayResolutionHorizontal  99928 non-null   float64       \n 38  PrimaryDisplayResolutionVertical    99928 non-null   float64       \n 39  PowerPlatformRole                   100000 non-null  object        \n 40  NumericOSVersion                    100000 non-null  object        \n 41  OSArchitecture                      100000 non-null  object        \n 42  OSBranch                            100000 non-null  object        \n 43  OSBuildNumberOnly                   100000 non-null  int64         \n 44  OSBuildRevisionOnly                 100000 non-null  int64         \n 45  OSEdition                           100000 non-null  object        \n 46  OSInstallType                       100000 non-null  object        \n 47  OSInstallLanguageID                 99887 non-null   float64       \n 48  OSUILocaleID                        100000 non-null  int64         \n 49  AutoUpdateOptionsName               100000 non-null  object        \n 50  IsPortableOS                        100000 non-null  int64         \n 51  OSGenuineState                      100000 non-null  object        \n 52  LicenseActivationChannel            100000 non-null  object        \n 53  FlightRing                          100000 non-null  object        \n 54  FirmwareManufacturerID              99624 non-null   float64       \n 55  FirmwareVersionID                   99666 non-null   float64       \n 56  IsSecureBootEnabled                 100000 non-null  int64         \n 57  IsVirtualDevice                     99980 non-null   float64       \n 58  IsTouchEnabled                      100000 non-null  int64         \n 59  IsPenCapable                        100000 non-null  int64         \n 60  IsAlwaysOnAlwaysConnectedCapable    99866 non-null   float64       \n 61  IsGamer                             99441 non-null   float64       \n 62  RegionIdentifier                    99441 non-null   float64       \n 63  DateAS                              100000 non-null  datetime64[ns]\n 64  DateOS                              99976 non-null   datetime64[ns]\n 65  target                              100000 non-null  int64         \ndtypes: datetime64[ns](2), float64(28), int64(16), object(20)\nmemory usage: 50.4+ MB\n","output_type":"stream"}],"execution_count":50},{"cell_type":"code","source":"d_train=trian.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.572442Z","iopub.execute_input":"2025-03-03T14:51:50.572760Z","iopub.status.idle":"2025-03-03T14:51:50.598675Z","shell.execute_reply.started":"2025-03-03T14:51:50.572734Z","shell.execute_reply":"2025-03-03T14:51:50.597763Z"}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"unique_values = {}\ncolns = trian.select_dtypes(include=['object']).columns  \n\nfor col in colns:\n    unique_values[col] = trian[col].unique()  \n\nunique_values","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.599529Z","iopub.execute_input":"2025-03-03T14:51:50.599845Z","iopub.status.idle":"2025-03-03T14:51:50.736494Z","shell.execute_reply.started":"2025-03-03T14:51:50.599819Z","shell.execute_reply":"2025-03-03T14:51:50.735335Z"}},"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"{'ProductName': array(['win8defender', 'mse'], dtype=object),\n 'EngineVersion': array(['1.1.15200.1', '1.1.15100.1', '1.1.15000.2', '1.1.14800.3',\n        '1.1.14901.4', '1.1.15300.6', '1.1.14700.5', '1.1.13504.0',\n        '1.1.14104.0', '1.1.14306.0', '1.1.15300.5', '1.1.14600.4',\n        '1.1.13701.0', '1.1.15000.1', '1.1.13202.0', '1.1.13303.0',\n        '1.1.14500.5', '1.1.13601.0', '1.1.13704.0', '1.1.13407.0',\n        '1.1.14003.0', '1.1.14202.0', '1.1.14405.2', '1.1.13000.0',\n        '1.1.13804.0', '1.1.14500.2', '1.1.14800.1', '1.1.14305.0',\n        '1.1.14901.3', '1.1.13103.0', '1.1.13903.0', '1.1.12805.0',\n        '1.1.14700.4', '1.1.12902.0', '1.1.14700.3', '1.1.13802.0',\n        '1.1.13803.0'], dtype=object),\n 'AppVersion': array(['4.18.1807.18075', '4.12.17007.18011', '4.13.17134.228',\n        '4.14.17639.18041', '4.18.1806.18062', '4.12.16299.15',\n        '4.14.17613.18039', '4.9.10586.0', '4.10.209.0',\n        '4.16.17656.18052', '4.12.17007.18022', '4.11.15063.0',\n        '4.8.10240.17443', '4.9.10586.672', '4.9.10586.1106',\n        '4.11.15063.447', '4.13.17134.1', '4.9.10586.873', '4.10.14393.0',\n        '4.8.10240.16384', '4.9.10586.494', '4.9.10586.1045',\n        '4.11.15063.1155', '4.13.17134.191', '4.10.14393.953',\n        '4.10.14393.1794', '4.10.14393.1198', '4.8.10240.17797',\n        '4.13.17134.112', '4.18.1809.2', '4.8.10240.17914',\n        '4.12.17007.17123', '4.10.14393.1613', '4.9.10586.839',\n        '4.8.10240.17946', '4.9.10586.589', '4.10.14393.1593',\n        '4.9.10586.962', '4.10.14393.1066', '4.4.304.0', '4.8.204.0',\n        '4.8.10240.17394', '4.13.17134.319', '4.9.10586.916',\n        '4.8.10240.17202', '4.9.10586.965', '4.14.17613.18038',\n        '4.8.207.0', '4.8.10240.17861', '4.9.218.0', '4.10.14393.2273',\n        '4.10.14393.2248', '4.8.10240.17319', '4.8.10240.17071',\n        '4.8.10240.17113', '4.8.10240.17354', '4.5.216.0',\n        '4.8.10240.17146', '4.8.10240.17889', '4.7.205.0',\n        '4.8.10240.17918', '4.5.218.0', '4.18.1807.18072', '4.10.205.0',\n        '4.8.10240.17609', '4.8.10240.17184', '4.17.17685.20082',\n        '4.10.14393.726', '4.6.305.0'], dtype=object),\n 'PlatformType': array(['windows10', 'windows8', 'windows7', 'windows2016'], dtype=object),\n 'Processor': array(['x86', 'x64', 'arm64'], dtype=object),\n 'OSVersion': array(['10.0.0.0', '6.3.0.0', '6.1.1.0', '10.0.2.0', '10.0.1.0',\n        '10.0.3.0', '10.0.4.0'], dtype=object),\n 'SKUEditionName': array(['Home', 'Pro', 'Cloud', 'Education', 'Enterprise LTSB',\n        'Enterprise', 'Invalid', 'Server'], dtype=object),\n 'MDC2FormFactor': array(['SmallTablet', 'AllInOne', 'Desktop', 'Notebook', 'LargeTablet',\n        'Convertible', 'Detachable', 'PCOther', 'SmallServer',\n        'LargeServer', 'MediumServer'], dtype=object),\n 'DeviceFamily': array(['Windows.Desktop', 'Windows.Server'], dtype=object),\n 'PrimaryDiskType': array(['SSD', 'HDD', 'Unspecified', 'UNKNOWN', nan], dtype=object),\n 'PowerPlatformRole': array(['Slate', 'Desktop', 'Mobile', 'SOHOServer', 'UNKNOWN',\n        'Workstation', 'AppliancePC', 'EnterpriseServer',\n        'PerformanceServer'], dtype=object),\n 'NumericOSVersion': array(['10.0.14393.2214', '10.0.17134.228', '10.0.17134.285',\n        '10.0.15063.850', '10.0.17134.167', '10.0.17134.165',\n        '10.0.15063.1209', '10.0.15063.1266', '10.0.16299.371',\n        '10.0.16299.431', '10.0.17134.286', '10.0.17134.1',\n        '10.0.17134.254', '10.0.10586.104', '10.0.16299.665',\n        '10.0.14393.447', '10.0.17134.112', '10.0.15063.1088',\n        '10.0.10586.589', '10.0.16299.125', '10.0.16299.492',\n        '10.0.16299.611', '10.0.16299.192', '10.0.16299.214',\n        '10.0.14393.693', '10.0.14393.1770', '10.0.15063.0',\n        '10.0.14393.2007', '10.0.10240.17443', '10.0.16299.15',\n        '10.0.16299.309', '10.0.10586.753', '10.0.17134.81',\n        '10.0.17134.191', '10.0.10586.1176', '10.0.16299.402',\n        '10.0.16299.547', '10.0.10586.713', '10.0.15063.1206',\n        '10.0.10586.1045', '10.0.14393.2189', '10.0.15063.540',\n        '10.0.16299.579', '10.0.14393.1944', '10.0.14393.1066',\n        '10.0.14393.1884', '10.0.17134.137', '10.0.10586.36',\n        '10.0.16299.461', '10.0.15063.1292', '10.0.10586.63',\n        '10.0.17134.48', '10.0.17744.1004', '10.0.14393.1593',\n        '10.0.10586.873', '10.0.10586.0', '10.0.15063.909',\n        '10.0.10586.1106', '10.0.10586.164', '10.0.14393.953',\n        '10.0.14393.2125', '10.0.15063.726', '10.0.15063.632',\n        '10.0.10586.679', '10.0.10586.218', '10.0.10240.16405',\n        '10.0.10586.494', '10.0.10240.16384', '10.0.16299.64',\n        '10.0.15063.1029', '10.0.14393.1715', '10.0.16299.248',\n        '10.0.16299.251', '10.0.14393.2368', '10.0.10586.545',\n        '10.0.15063.250', '10.0.15063.674', '10.0.10586.420',\n        '10.0.14393.0', '10.0.15063.413', '10.0.15063.1112',\n        '10.0.15063.483', '10.0.15063.1324', '10.0.15063.11',\n        '10.0.15063.1155', '10.0.16299.637', '10.0.16299.551',\n        '10.0.14393.351', '10.0.15063.608', '10.0.16299.98',\n        '10.0.17692.1004', '10.0.16299.334', '10.0.14393.1198',\n        '10.0.16299.522', '10.0.10240.17831', '10.0.14393.187',\n        '10.0.14393.1358', '10.0.10586.318', '10.0.14393.1914',\n        '10.0.15063.966', '10.0.10240.17914', '10.0.15063.786',\n        '10.0.14393.1480', '10.0.15063.1058', '10.0.14393.321',\n        '10.0.15063.296', '10.0.15063.729', '10.0.14393.2068',\n        '10.0.15063.1235', '10.0.16299.19', '10.0.14393.576',\n        '10.0.10586.839', '10.0.10586.14', '10.0.17744.1001',\n        '10.0.10240.17976', '10.0.15063.936', '10.0.10240.16487',\n        '10.0.10586.3', '10.0.14393.10', '10.0.16299.666',\n        '10.0.17134.319', '10.0.10586.71', '10.0.14393.2363',\n        '10.0.15063.332', '10.0.14393.222', '10.0.10586.29',\n        '10.0.14393.2155', '10.0.10586.962', '10.0.17760.1',\n        '10.0.10586.633', '10.0.10586.1007', '10.0.14393.5',\n        '10.0.10586.916', '10.0.15063.1154', '10.0.14393.479',\n        '10.0.10240.17394', '10.0.10240.17946', '10.0.17763.1',\n        '10.0.15063.877', '10.0.10240.16725', '10.0.17746.1000',\n        '10.0.14393.2248', '10.0.10240.17236', '10.0.14393.2035',\n        '10.0.14393.51', '10.0.10586.122', '10.0.14393.82',\n        '10.0.15063.138', '10.0.15063.447', '10.0.16299.696',\n        '10.0.17758.4', '10.0.10240.16644', '10.0.15063.502',\n        '10.0.14393.2312', '10.0.10240.16601', '10.0.10240.17918',\n        '10.0.14393.105', '10.0.17723.1000', '10.0.14393.2097',\n        '10.0.17738.1000', '10.0.14393.2430', '10.0.14393.2396',\n        '10.0.10240.16683', '10.0.17754.1', '10.0.10240.16433',\n        '10.0.14393.726', '10.0.17744.1003', '10.0.10240.17319',\n        '10.0.10240.17071', '10.0.10240.16445', '10.0.10240.17113',\n        '10.0.15063.994', '10.0.10240.16590', '10.0.14393.969',\n        '10.0.17751.1', '10.0.17741.1000', '10.0.10240.16413',\n        '10.0.10240.17354', '10.0.15063.1356', '10.0.14393.2339',\n        '10.0.15063.1182', '10.0.10240.17861', '10.0.10586.11',\n        '10.0.14393.2457', '10.0.10240.17146', '10.0.10240.17797',\n        '10.0.17758.1', '10.0.10240.16430', '10.0.14393.2485',\n        '10.0.10240.17889', '10.0.10586.17', '10.0.10586.446',\n        '10.0.17134.5', '10.0.14393.970', '10.0.14393.2395',\n        '10.0.17755.1', '10.0.15063.13', '10.0.10240.16942',\n        '10.0.17735.1000', '10.0.10240.16397', '10.0.17134.83',\n        '10.0.10240.16463', '10.0.14393.1378', '10.0.14393.3',\n        '10.0.10240.16520', '10.0.10240.17738', '10.0.10240.16549',\n        '10.0.14393.577', '10.0.10240.17190', '10.0.16299.194',\n        '10.0.15063.675', '10.0.10240.16771', '10.0.17672.1000',\n        '10.0.10586.338', '10.0.15060.0', '10.0.10240.16854',\n        '10.0.10240.17024', '10.0.14393.1532', '10.0.17133.1',\n        '10.0.14393.2273', '10.0.17686.1003'], dtype=object),\n 'OSArchitecture': array(['x86', 'amd64', 'arm64'], dtype=object),\n 'OSBranch': array(['rs1_release', 'rs4_release', 'rs2_release', 'rs3_release',\n        'rs3_release_svc_escrow', 'th2_release', 'th1_st1',\n        'th2_release_sec', 'rs3_release_svc_escrow_im', 'th1',\n        'rs5_release', 'rs_prerelease_flt', 'rs_prerelease'], dtype=object),\n 'OSEdition': array(['Core', 'Professional', 'CoreSingleLanguage', 'ProfessionalN',\n        'ProfessionalEducation', 'CoreCountrySpecific', 'Cloud',\n        'Education', 'EnterpriseS', 'Enterprise', 'EnterpriseSN', 'CoreN',\n        'EducationN', 'ServerStandard', 'ProfessionalEducationN',\n        'ServerStandardEval', 'EnterpriseN', 'ServerSolution',\n        'ServerDatacenterEval', 'ProfessionalWorkstation'], dtype=object),\n 'OSInstallType': array(['Update', 'UUPUpgrade', 'Reset', 'Upgrade', 'IBSClean', 'Other',\n        'Refresh', 'CleanPCRefresh', 'Clean'], dtype=object),\n 'AutoUpdateOptionsName': array(['UNKNOWN', 'FullAuto', 'AutoInstallAndRebootAtMaintenanceTime',\n        'Notify', 'Off', 'DownloadNotify'], dtype=object),\n 'OSGenuineState': array(['IS_GENUINE', 'INVALID_LICENSE', 'OFFLINE', 'UNKNOWN'],\n       dtype=object),\n 'LicenseActivationChannel': array(['Retail', 'OEM:DM', 'OEM:NONSLP', 'Volume:GVLK', 'Volume:MAK',\n        'Retail:TB:Eval'], dtype=object),\n 'FlightRing': array(['Retail', 'NOT_SET', 'Unknown', 'WIS', 'RP', 'Disabled', 'WIF'],\n       dtype=object)}"},"metadata":{}}],"execution_count":52},{"cell_type":"markdown","source":"## there seems to be no ordinal coulums","metadata":{}},{"cell_type":"code","source":"def tree_based_feature_selector(df, y, n_features=10):\n    # Train a Random Forest classifier to get feature importances\n    rf = RandomForestClassifier(n_estimators=100, random_state=42)\n    rf.fit(df, y)\n\n    # Get feature importances\n    feature_importances = rf.feature_importances_\n    \n    # Select top n_features\n    important_features = np.argsort(feature_importances)[-n_features:]\n    \n    # Return the dataframe with selected features\n    return df.iloc[:, important_features]\n\ndef custom_preprocessing(df):\n    numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n    categorical_cols = df.select_dtypes(include=['object']).columns\n\n    preprocessor = ColumnTransformer(\n        transformers=[\n            ('num', Pipeline([\n                ('imputer', SimpleImputer(strategy='most_frequent')),\n                ('scaler', StandardScaler())\n            ]), numeric_cols),\n            ('cat', Pipeline([\n                ('imputer', SimpleImputer(strategy='most_frequent')),\n                ('encoder', OneHotEncoder(sparse_output=False, drop='first'))\n            ]), categorical_cols)\n        ]\n    )\n    \n    processed_data = preprocessor.fit_transform(df)\n    \n    # Create a DataFrame with proper column names\n    processed_df = pd.DataFrame(processed_data, columns=preprocessor.get_feature_names_out())\n\n    return processed_df\n\n# Example Usage:\n# Assuming df is your dataset and y is the target variable","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.737706Z","iopub.execute_input":"2025-03-03T14:51:50.738026Z","iopub.status.idle":"2025-03-03T14:51:50.746146Z","shell.execute_reply.started":"2025-03-03T14:51:50.737997Z","shell.execute_reply":"2025-03-03T14:51:50.744810Z"}},"outputs":[],"execution_count":53},{"cell_type":"code","source":"def custom_preprocessing(df, y, k=30):\n    numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n    categorical_cols = df.select_dtypes(include=['object']).columns\n\n    # Pipeline for numerical features: imputation, scaling, and feature selection\n    num_pipeline = Pipeline([\n        ('imputer', SimpleImputer(strategy='most_frequent')),\n        ('scaler', StandardScaler()),\n        ('feature_selector', SelectKBest(score_func=f_classif, k=k))  # Select top K numeric features\n    ])\n\n    # Pipeline for categorical features: imputation, one-hot encoding, and feature selection\n    cat_pipeline = Pipeline([\n        ('imputer', SimpleImputer(strategy='most_frequent')),\n        ('encoder', OneHotEncoder(sparse_output=False, drop='first')),\n        ('feature_selector', SelectKBest(score_func=f_classif, k=k))  # Select top K categorical features\n    ])\n\n    # Combine both pipelines\n    preprocessor = ColumnTransformer(\n        transformers=[\n            ('num', num_pipeline, numeric_cols),\n            ('cat', cat_pipeline, categorical_cols)\n        ]\n    )\n\n    # Apply the preprocessing steps and fit it to the data\n    processed_data = preprocessor.fit_transform(df, y)\n\n    # Create a DataFrame with proper column names for processed features\n    processed_df = pd.DataFrame(processed_data, columns=preprocessor.get_feature_names_out())\n\n    # Append the target (y) as a new column at the end\n    processed_df['target'] = y.values\n\n    return processed_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.747233Z","iopub.execute_input":"2025-03-03T14:51:50.747527Z","iopub.status.idle":"2025-03-03T14:51:50.769900Z","shell.execute_reply.started":"2025-03-03T14:51:50.747501Z","shell.execute_reply":"2025-03-03T14:51:50.768600Z"}},"outputs":[],"execution_count":54},{"cell_type":"code","source":"d_train_clean = custom_preprocessing(d_train)\n# Step 1: Select important features using a tree-based method\ndf_selected = tree_based_feature_selector(d_train_clean, target, n_features=30)\n\n# Step 2: Apply the custom preprocessing pipeline on the selected features\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.771119Z","iopub.execute_input":"2025-03-03T14:51:50.771433Z","iopub.status.idle":"2025-03-03T14:51:50.808557Z","shell.execute_reply.started":"2025-03-03T14:51:50.771406Z","shell.execute_reply":"2025-03-03T14:51:50.805679Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-55-72282cf7e0b9>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0md_train_clean\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcustom_preprocessing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m# Step 1: Select important features using a tree-based method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdf_selected\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtree_based_feature_selector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md_train_clean\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Step 2: Apply the custom preprocessing pipeline on the selected features\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: custom_preprocessing() missing 1 required positional argument: 'y'"],"ename":"TypeError","evalue":"custom_preprocessing() missing 1 required positional argument: 'y'","output_type":"error"}],"execution_count":55},{"cell_type":"code","source":"d_train_clean = custom_preprocessing(d_train, target, k=10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.809056Z","iopub.status.idle":"2025-03-03T14:51:50.809362Z","shell.execute_reply":"2025-03-03T14:51:50.809242Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"corr=df_selected.corr()\nplt.figure(figsize=(20, 8))\nsns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.810340Z","iopub.status.idle":"2025-03-03T14:51:50.810654Z","shell.execute_reply":"2025-03-03T14:51:50.810516Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"corr=d_train_clean.corr()\nplt.figure(figsize=(20, 10))\nsns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.811906Z","iopub.status.idle":"2025-03-03T14:51:50.812354Z","shell.execute_reply":"2025-03-03T14:51:50.812160Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"d_train_clean.drop('num__target',inplace=True,axis=1)\nnew_train=d_train_clean","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.813287Z","iopub.status.idle":"2025-03-03T14:51:50.813767Z","shell.execute_reply":"2025-03-03T14:51:50.813571Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def create_pie_charts_for_categorical(df):\n    columns = df.columns\n    num_charts = len(columns)\n    \n    # Calculate rows and columns for the rectangular grid\n    cols = min(4, num_charts)  # Choose a reasonable number of columns, here up to 3\n    rows = math.ceil(num_charts / cols)\n\n    fig, axes = plt.subplots(rows, cols, figsize=(6 * cols, 6 * rows))\n    axes = axes.flatten()  # Flatten in case of multi-row/column subplots\n\n    for i, col in enumerate(columns):\n        values = df[col].value_counts()\n        labels = values.index\n        wedges, _, _ = axes[i].pie(values, autopct='%1.1f%%', startangle=90, \n                                   textprops={'fontsize': 12})\n        \n        # Add title and equal axis\n        axes[i].set_title(f'Pie Chart for {col}', fontsize=14)\n        axes[i].axis('equal')\n        \n        # Add a legend on the side\n        # axes[i].legend(wedges, labels, loc=\"center left\", bbox_to_anchor=(1, 0.5), fontsize=10)\n    \n    # Hide any unused subplots\n    for j in range(i + 1, len(axes)):\n        fig.delaxes(axes[j])\n\n    plt.tight_layout()\n    plt.show()\n# # Example usage:\n# data = {'Col1': ['A', 'B', 'A', 'C', 'B', 'A'], \n#         'Col2': ['X', 'X', 'Y', 'Y', 'Z', 'X'],\n#         'Col3': ['M', 'M', 'N', 'N', 'O', 'M'],\n#         'Col4': ['G', 'H', 'I', 'J', 'K', 'L']}\n# df = pd.DataFrame(data)\n\ncreate_pie_charts_for_categorical(new_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.815217Z","iopub.status.idle":"2025-03-03T14:51:50.815701Z","shell.execute_reply":"2025-03-03T14:51:50.815470Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def create_histograms_for_entire_dataset(df):\n    columns = df.columns\n    num_charts = len(columns)\n    \n    # Calculate rows and columns for the rectangular grid\n    cols = min(3, num_charts)  # Choose up to 3 columns for the grid\n    rows = math.ceil(num_charts / cols)\n\n    fig, axes = plt.subplots(rows, cols, figsize=(6 * cols, 6 * rows))\n    axes = axes.flatten()\n\n    for i, col in enumerate(columns):\n        if df[col].dtype == 'object':\n            df[col].value_counts().plot(kind='bar', ax=axes[i])\n            axes[i].set_title(f'Bar Chart for {col}', fontsize=14)\n        else:\n            df[col].plot(kind='hist', bins=15, ax=axes[i])\n            axes[i].set_title(f'Histogram for {col}', fontsize=14)\n        axes[i].set_xlabel(col)\n    \n    # Hide any unused subplots\n    for j in range(i + 1, len(axes)):\n        fig.delaxes(axes[j])\n\n    plt.tight_layout()\n    plt.show()\n\n# Example usage:\ncreate_histograms_for_entire_dataset(new_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.816959Z","iopub.status.idle":"2025-03-03T14:51:50.817398Z","shell.execute_reply":"2025-03-03T14:51:50.817206Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"new_train.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.818519Z","iopub.status.idle":"2025-03-03T14:51:50.818993Z","shell.execute_reply":"2025-03-03T14:51:50.818800Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"target=new_train['target']\nnew_train.drop('target',inplace=True,axis=1)\nX=new_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.819692Z","iopub.status.idle":"2025-03-03T14:51:50.820139Z","shell.execute_reply":"2025-03-03T14:51:50.819948Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create a new combined column for stratification based on all features\nstratify_col = X.astype(str).agg('_'.join, axis=1)\n\n# Now use this combined column in stratify\nX_train, X_test, y_train, y_test = train_test_split(X, target, test_size=0.2,  random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.820926Z","iopub.status.idle":"2025-03-03T14:51:50.821361Z","shell.execute_reply":"2025-03-03T14:51:50.821170Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def metrics(clf, X_test, y_test, y_pred):\n    if hasattr(clf, 'predict_proba'):\n        y_prob = clf.predict_proba(X_test)[:, 1]  # Probabilities for class 1 (positive class)\n    else:\n        # If predict_proba is not available, use decision_function and apply sigmoid for probabilities\n        decision_values = clf.decision_function(X_test)\n        y_prob = 1 / (1 + np.exp(-decision_values))  # Sigmoid to get probabilities for binary classification\n    # calculating and printing the metrics\n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    conf_matrix = confusion_matrix(y_test, y_pred)\n    \n    # Displaying confusion matrix\n    disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=clf.classes_)\n    disp.plot()\n\n    cross_val = cross_val_score(clf, X_test, y_test, cv=5, scoring='accuracy')\n    \n    # Printing metrics\n    print(f'Accuracy: {accuracy}')\n    print(f'Cross-Validation Accuracy: {cross_val.mean():.4f}')\n    print(f'Precision: {precision}')\n    print(f'Recall: {recall}')\n    print(f'F1 Score: {f1}')\n    print(f'Confusion Matrix:\\n{conf_matrix}')\n    \n    # Precision-Recall curve\n    precision_vals, recall_vals, _ = precision_recall_curve(y_test, y_prob)\n    plt.figure()\n    plt.plot(recall_vals, precision_vals, marker='.', label='Precision-Recall curve')\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.title('Precision-Recall Curve')\n    plt.legend()\n    plt.show()\n    \n    # ROC curve\n    fpr, tpr, _ = roc_curve(y_test, y_prob)\n    roc_auc = auc(fpr, tpr)\n    \n    plt.figure()\n    plt.plot(fpr, tpr, color='blue', label=f'ROC curve (AUC = {roc_auc:.2f})')\n    plt.plot([0, 1], [0, 1], color='red', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()\n\ndef metrics_classic(y_test,y_pred):\n    # calculating and plotting the metrics\n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    conf_matrix = confusion_matrix(y_test, y_pred)\n    # disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=clf.classes_)\n    \n    print(f'Accuracy: {accuracy}')\n    print(f'Precision: {precision}')\n    print(f'Recall: {recall}')\n    print(f'F1 Score: {f1}')\n    print(f'Confusion Matrix:\\n{conf_matrix}')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.822496Z","iopub.status.idle":"2025-03-03T14:51:50.822838Z","shell.execute_reply":"2025-03-03T14:51:50.822711Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# trying out different models ","metadata":{}},{"cell_type":"code","source":"model = DecisionTreeClassifier(max_depth=10)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nmetrics(model, X_test, y_test, y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.823857Z","iopub.status.idle":"2025-03-03T14:51:50.824146Z","shell.execute_reply":"2025-03-03T14:51:50.824032Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sgd=SGDClassifier(loss='modified_huber',class_weight='balanced')\nparameters = {'alpha':[0.0001,0.001,0.01,0.1,1,10,100], 'max_iter':[1000,10000,100000]}\nclf = GridSearchCV(sgd, parameters,n_jobs=-1)\nclf.fit(X_train, y_train)\nbest_params=clf.best_params_\nprint(best_params)\nsgd_best = SGDClassifier(alpha=best_params['alpha'], max_iter=best_params['max_iter'])\nsgd_best.fit(X_train, y_train)\ny_pred=sgd_best.predict(X_test)\nmetrics(clf,X_test,y_test,y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.824914Z","iopub.status.idle":"2025-03-03T14:51:50.825190Z","shell.execute_reply":"2025-03-03T14:51:50.825076Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rc=RidgeClassifier()\nparameters = {'alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100],'max_iter':[1000,10000,100000]}\nclf = GridSearchCV(rc, parameters,n_jobs=-1)\nclf.fit(X_train, y_train)\nbest_params = clf.best_params_\nprint(best_params)\n# tunning the hyperparameters.\nridge_best = RidgeClassifier(alpha=best_params['alpha'],max_iter=best_params['max_iter'])\nridge_best.fit(X_train, y_train)\ny_pred = ridge_best.predict(X_test)\nmetrics(clf,X_test,y_test,y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.826185Z","iopub.status.idle":"2025-03-03T14:51:50.826668Z","shell.execute_reply":"2025-03-03T14:51:50.826439Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"log_reg = LogisticRegression(max_iter=1000)\nlog_reg.fit(X_train, y_train)\ny_pred = log_reg.predict(X_test)\nmetrics(log_reg,X_test,y_test,y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.828025Z","iopub.status.idle":"2025-03-03T14:51:50.828470Z","shell.execute_reply":"2025-03-03T14:51:50.828277Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"nb_classifier = GaussianNB()\n# clf_nb = GridSearchCV(pipeline_nb, parameters_nb, cv=3, n_jobs=-1)\nnb_classifier.fit(X_train, y_train)\ny_pred_nb = nb_classifier.predict(X_test)\n\nmetrics(nb_classifier,X_test,y_test,y_pred_nb)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:59:34.893249Z","iopub.execute_input":"2025-03-03T14:59:34.893679Z","iopub.status.idle":"2025-03-03T14:59:35.689271Z","shell.execute_reply.started":"2025-03-03T14:59:34.893638Z","shell.execute_reply":"2025-03-03T14:59:35.688143Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.5791\nCross-Validation Accuracy: 0.5770\nPrecision: 0.5929808499889941\nRecall: 0.5791\nF1 Score: 0.55913666340426\nConfusion Matrix:\n[[3604 6274]\n [2144 7978]]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":58},{"cell_type":"code","source":"kmeans = KMeans(n_clusters=2)\nkmeans.fit(X_train)\n\ny_kmeans = kmeans.predict(X_test)\n\ndef get_mapped_labels(y_true, y_pred):\n    labels = np.zeros_like(y_pred)\n    for i in range(2):  \n        mask = (y_pred == i)\n        if np.any(mask):  # Check if the mask has any true values\n            labels[mask] = mode(y_true[mask])[0]\n    return labels\n\nmapped_labels = get_mapped_labels(y_test, y_kmeans)\nmetrics_classic(y_test,mapped_labels)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:00:49.538710Z","iopub.execute_input":"2025-03-03T15:00:49.539090Z","iopub.status.idle":"2025-03-03T15:00:49.834055Z","shell.execute_reply.started":"2025-03-03T15:00:49.539062Z","shell.execute_reply":"2025-03-03T15:00:49.832749Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy: 0.5659\nPrecision: 0.5775634842867232\nRecall: 0.5659\nF1 Score: 0.5444465799598216\nConfusion Matrix:\n[[3430 6448]\n [2234 7888]]\n","output_type":"stream"}],"execution_count":61},{"cell_type":"code","source":"dtrain = xgb.DMatrix(X_train, label=y_train)\ndtest = xgb.DMatrix(X_test, label=y_test)\n\nparams = {\n    'objective': 'binary:logistic',  \n    'max_depth': 6,\n    'eta': 0.1,\n    'eval_metric': 'logloss'\n}\n\nmodel_xgb = xgb.train(params, dtrain, num_boost_round=100, evals=[(dtest, 'test')])\ny_pred_xgb = model_xgb.predict(dtest)\n\ny_pred_xgb = model_xgb.predict(dtest)\n# metrics\ny_pred_xgb_binary = [1 if pred > 0.5 else 0 for pred in y_pred_xgb]\nmetrics_classic(y_test,y_pred_xgb_binary)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:01:17.693852Z","iopub.execute_input":"2025-03-03T15:01:17.694215Z","iopub.status.idle":"2025-03-03T15:01:18.811824Z","shell.execute_reply.started":"2025-03-03T15:01:17.694189Z","shell.execute_reply":"2025-03-03T15:01:18.810414Z"}},"outputs":[{"name":"stdout","text":"[0]\ttest-logloss:0.68757\n[1]\ttest-logloss:0.68310\n[2]\ttest-logloss:0.67942\n[3]\ttest-logloss:0.67637\n[4]\ttest-logloss:0.67383\n[5]\ttest-logloss:0.67167\n[6]\ttest-logloss:0.67000\n[7]\ttest-logloss:0.66854\n[8]\ttest-logloss:0.66715\n[9]\ttest-logloss:0.66610\n[10]\ttest-logloss:0.66513\n[11]\ttest-logloss:0.66439\n[12]\ttest-logloss:0.66377\n[13]\ttest-logloss:0.66314\n[14]\ttest-logloss:0.66249\n[15]\ttest-logloss:0.66211\n[16]\ttest-logloss:0.66167\n[17]\ttest-logloss:0.66134\n[18]\ttest-logloss:0.66097\n[19]\ttest-logloss:0.66072\n[20]\ttest-logloss:0.66045\n[21]\ttest-logloss:0.66029\n[22]\ttest-logloss:0.66010\n[23]\ttest-logloss:0.65993\n[24]\ttest-logloss:0.65970\n[25]\ttest-logloss:0.65960\n[26]\ttest-logloss:0.65950\n[27]\ttest-logloss:0.65936\n[28]\ttest-logloss:0.65927\n[29]\ttest-logloss:0.65913\n[30]\ttest-logloss:0.65906\n[31]\ttest-logloss:0.65899\n[32]\ttest-logloss:0.65897\n[33]\ttest-logloss:0.65894\n[34]\ttest-logloss:0.65883\n[35]\ttest-logloss:0.65879\n[36]\ttest-logloss:0.65873\n[37]\ttest-logloss:0.65870\n[38]\ttest-logloss:0.65868\n[39]\ttest-logloss:0.65868\n[40]\ttest-logloss:0.65862\n[41]\ttest-logloss:0.65862\n[42]\ttest-logloss:0.65862\n[43]\ttest-logloss:0.65860\n[44]\ttest-logloss:0.65855\n[45]\ttest-logloss:0.65853\n[46]\ttest-logloss:0.65848\n[47]\ttest-logloss:0.65851\n[48]\ttest-logloss:0.65847\n[49]\ttest-logloss:0.65849\n[50]\ttest-logloss:0.65844\n[51]\ttest-logloss:0.65842\n[52]\ttest-logloss:0.65841\n[53]\ttest-logloss:0.65841\n[54]\ttest-logloss:0.65841\n[55]\ttest-logloss:0.65839\n[56]\ttest-logloss:0.65840\n[57]\ttest-logloss:0.65840\n[58]\ttest-logloss:0.65840\n[59]\ttest-logloss:0.65842\n[60]\ttest-logloss:0.65843\n[61]\ttest-logloss:0.65843\n[62]\ttest-logloss:0.65841\n[63]\ttest-logloss:0.65841\n[64]\ttest-logloss:0.65837\n[65]\ttest-logloss:0.65839\n[66]\ttest-logloss:0.65839\n[67]\ttest-logloss:0.65847\n[68]\ttest-logloss:0.65849\n[69]\ttest-logloss:0.65852\n[70]\ttest-logloss:0.65850\n[71]\ttest-logloss:0.65849\n[72]\ttest-logloss:0.65851\n[73]\ttest-logloss:0.65851\n[74]\ttest-logloss:0.65856\n[75]\ttest-logloss:0.65855\n[76]\ttest-logloss:0.65851\n[77]\ttest-logloss:0.65850\n[78]\ttest-logloss:0.65848\n[79]\ttest-logloss:0.65848\n[80]\ttest-logloss:0.65851\n[81]\ttest-logloss:0.65855\n[82]\ttest-logloss:0.65855\n[83]\ttest-logloss:0.65858\n[84]\ttest-logloss:0.65858\n[85]\ttest-logloss:0.65858\n[86]\ttest-logloss:0.65858\n[87]\ttest-logloss:0.65861\n[88]\ttest-logloss:0.65861\n[89]\ttest-logloss:0.65864\n[90]\ttest-logloss:0.65864\n[91]\ttest-logloss:0.65867\n[92]\ttest-logloss:0.65868\n[93]\ttest-logloss:0.65871\n[94]\ttest-logloss:0.65876\n[95]\ttest-logloss:0.65877\n[96]\ttest-logloss:0.65876\n[97]\ttest-logloss:0.65878\n[98]\ttest-logloss:0.65880\n[99]\ttest-logloss:0.65885\nAccuracy: 0.6121\nPrecision: 0.6146330136502159\nRecall: 0.6121\nF1 Score: 0.6088501894351255\nConfusion Matrix:\n[[5147 4731]\n [3027 7095]]\n","output_type":"stream"}],"execution_count":62},{"cell_type":"code","source":"# lightgbm model\ntrain_data = lgb.Dataset(X_train, label=y_train)\ntest_data = lgb.Dataset(X_test, label=y_test, reference=train_data)\n\nparams = {\n    'objective': 'binary',  \n    'metric': 'binary_logloss',\n    'boosting': 'gbdt',\n    'num_leaves': 31,\n    'learning_rate': 0.05,\n}\n\nmodel_lgb = lgb.train(params, train_data, num_boost_round=100, valid_sets=[test_data])\n\ny_pred_lgb = model_lgb.predict(X_test)\ny_pred_lgb_binary = [1 if pred > 0.5 else 0 for pred in y_pred_lgb]\n\nmetrics_classic(y_test,y_pred_lgb_binary)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:01:41.612977Z","iopub.execute_input":"2025-03-03T15:01:41.613318Z","iopub.status.idle":"2025-03-03T15:01:42.404100Z","shell.execute_reply.started":"2025-03-03T15:01:41.613290Z","shell.execute_reply":"2025-03-03T15:01:42.402784Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 40403, number of negative: 39597\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.007329 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 454\n[LightGBM] [Info] Number of data points in the train set: 80000, number of used features: 19\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.505038 -> initscore=0.020151\n[LightGBM] [Info] Start training from score 0.020151\nAccuracy: 0.6129\nPrecision: 0.6152276941747573\nRecall: 0.6129\nF1 Score: 0.6098900490472037\nConfusion Matrix:\n[[5188 4690]\n [3052 7070]]\n","output_type":"stream"}],"execution_count":63},{"cell_type":"code","source":"model_bagging = BaggingClassifier(base_estimator=DecisionTreeClassifier(), n_estimators=10)\nmodel_bagging.fit(X_train, y_train)\ny_pred_bagging = model_bagging.predict(X_test)\n\nmetrics_classic(y_test,y_pred_bagging)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T15:02:28.886722Z","iopub.execute_input":"2025-03-03T15:02:28.887136Z","iopub.status.idle":"2025-03-03T15:02:30.685856Z","shell.execute_reply.started":"2025-03-03T15:02:28.887102Z","shell.execute_reply":"2025-03-03T15:02:30.684681Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy: 0.5782\nPrecision: 0.5802749293690984\nRecall: 0.5782\nF1 Score: 0.5736066966292135\nConfusion Matrix:\n[[4682 5196]\n [3240 6882]]\n","output_type":"stream"}],"execution_count":66},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## milestone 2","metadata":{}},{"cell_type":"code","source":"# Finding columns in 'train' that are missing in 'trian'\nmissing_columns = set(train.columns) - set(trian.columns)\n\n# Display the missing columns\nprint(\"Columns deleted from 'train':\", missing_columns)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.831041Z","iopub.status.idle":"2025-03-03T14:51:50.831484Z","shell.execute_reply":"2025-03-03T14:51:50.831290Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Step 1: Create cat_df containing only columns of datatype 'object'\ncat_df = trian.select_dtypes(include='object')\n\n# Step 2: Find columns with less than or equal to 10 unique values\ncolumns_to_encode = [col for col in cat_df.columns if cat_df[col].nunique() <= 10]\n\n# Step 3: Apply OneHotEncoder for these columns\nencoder = OneHotEncoder(sparse=False, drop='first', handle_unknown='ignore')\n\n# Step 4: Transform these columns using the encoder\nencoded_data = encoder.fit_transform(cat_df[columns_to_encode])\n\n# Step 5: Convert the encoded data to a DataFrame\nencoded_df = pd.DataFrame(encoded_data, columns=encoder.get_feature_names_out(columns_to_encode))\n\n# Step 6: Drop the original columns that were encoded from cat_df\ncat_df = cat_df.drop(columns=columns_to_encode)\n\n# Step 7: Concatenate the encoded columns back to cat_df\ncat_df = pd.concat([cat_df.reset_index(drop=True), encoded_df.reset_index(drop=True)], axis=1)\n\n# Step 8: Find the new number of columns in cat_df\nnew_num_columns = cat_df.shape[1]\n\nprint(\"New number of columns in cat_df:\", new_num_columns)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.832514Z","iopub.status.idle":"2025-03-03T14:51:50.832989Z","shell.execute_reply":"2025-03-03T14:51:50.832796Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Step 1: Create num_df containing only columns of datatype 'int64' and 'float64'\nnum_df = trian.select_dtypes(include=['int64', 'float64'])\n\n# Step 2: Apply MinMaxScaler on num_df\nscaler = MinMaxScaler()\nscaled_num_df = pd.DataFrame(scaler.fit_transform(num_df), columns=num_df.columns)\n\n# Step 3: Find the sum of all the values in the scaled num_df\ntotal_sum = scaled_num_df.sum().sum()\n\nprint(\"Sum of all the values in num_df:\", total_sum)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.834038Z","iopub.status.idle":"2025-03-03T14:51:50.834425Z","shell.execute_reply":"2025-03-03T14:51:50.834226Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Step 1: Split the dataset into features (X) and target (y)\nX = trian.drop('target', axis=1)  # Replace 'target' with the actual target column name\ny = trian['target']  # Replace 'target' with the actual target column name\n\n# Step 1.1: Drop datetime columns from X\nX = X.select_dtypes(exclude=['datetime64'])\n\n# Step 2: Fill missing values using SimpleImputer with strategy 'most_frequent'\nimputer = SimpleImputer(strategy='most_frequent')\nX_imputed = pd.DataFrame(imputer.fit_transform(X), columns=X.columns)\n\n# Step 3: For columns of datatype 'object', use OrdinalEncoder\nencoder = OrdinalEncoder()\nX_imputed[X_imputed.select_dtypes(include=['object']).columns] = encoder.fit_transform(X_imputed.select_dtypes(include=['object']))\n\n# Step 4: Apply train_test_split with test_size=0.2 and random_state=42\nX_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=42)\n\n# Step 5: Train SGDClassifier with default parameters and random_state=42\nclf = SGDClassifier(random_state=42)\nclf.fit(X_train, y_train)\n\n# Step 6: Make predictions on the test data\ny_pred = clf.predict(X_test)\n\n# Step 7: Calculate accuracy score\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy score on the test data:\", accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.835285Z","iopub.status.idle":"2025-03-03T14:51:50.835693Z","shell.execute_reply":"2025-03-03T14:51:50.835483Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## milestone 3","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n# Step 1: Split data into numeric and categoric columns\n# X = trian.drop('target', axis=1)  # Features\n# y = trian['target']  # Target\n\n# Separate numeric and categoric columns\nnumeric_cols = X.select_dtypes(include=['int64', 'float64']).columns\ncategoric_cols = X.select_dtypes(include=['object']).columns\n\n# Step 2: Impute missing values\n# Impute numeric columns with mean\nnumeric_imputer = SimpleImputer(strategy='mean')\nX[numeric_cols] = numeric_imputer.fit_transform(X[numeric_cols])\n\n# Impute categoric columns with mode\ncategoric_imputer = SimpleImputer(strategy='most_frequent')\nX[categoric_cols] = categoric_imputer.fit_transform(X[categoric_cols])\n\n# Step 3: Label Encoding for categoric columns\nlabel_encoder = LabelEncoder()\nfor col in categoric_cols:\n    X[col] = label_encoder.fit_transform(X[col])\n\n# Step 4: Standardize the numeric columns\nscaler = StandardScaler()\nX[numeric_cols] = scaler.fit_transform(X[numeric_cols])\n\n# Step 5: Train-test split (test_size=0.2, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Now, X_train, X_test, y_train, and y_test are ready for model training and evaluation.\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.836300Z","iopub.status.idle":"2025-03-03T14:51:50.836738Z","shell.execute_reply":"2025-03-03T14:51:50.836460Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.837879Z","iopub.status.idle":"2025-03-03T14:51:50.838304Z","shell.execute_reply":"2025-03-03T14:51:50.838119Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n# Initialize the Decision Tree Classifier\ndt = DecisionTreeClassifier(random_state=42)\n\n# Define the hyperparameters for grid search\nparam_grid = {\n    'max_depth': [20, 30],\n    'min_samples_split': [2, 5],\n    'min_samples_leaf': [1, 2]\n}\n\n# Initialize the GridSearchCV\ngrid_search = GridSearchCV(estimator=dt, param_grid=param_grid, scoring='accuracy', cv=3)\n\n# Fit the model on the training data\ngrid_search.fit(X_train, y_train)\n\n# Print the best parameters and best score\nprint(\"Best Parameters:\", grid_search.best_params_)\nprint(\"Best Accuracy:\", grid_search.best_score_)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.839417Z","iopub.status.idle":"2025-03-03T14:51:50.839889Z","shell.execute_reply":"2025-03-03T14:51:50.839748Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n# Initialize the AdaBoostClassifier\nadaboost_clf = AdaBoostClassifier(random_state=42)\n\n# Set up the hyperparameter grid\nparam_grid = {\n    'n_estimators': [10, 20, 30],\n    'learning_rate': [5, 10],\n    'algorithm': ['SAMME']\n}\n\n# Initialize GridSearchCV\ngrid_search = GridSearchCV(estimator=adaboost_clf, param_grid=param_grid, cv=3, scoring='accuracy')\n\n# Fit the model to the training data\ngrid_search.fit(X_train, y_train)\n\n# Get the best parameters and the best score\nbest_params = grid_search.best_params_\nbest_score = grid_search.best_score_\n\nprint(\"Best Parameters:\", best_params)\nprint(\"Best Cross-Validation Accuracy:\", best_score)\n\n# Test the model on the test set using the best estimator\ntest_accuracy = grid_search.best_estimator_.score(X_test, y_test)\nprint(\"Test Accuracy:\", test_accuracy)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.840668Z","iopub.status.idle":"2025-03-03T14:51:50.841051Z","shell.execute_reply":"2025-03-03T14:51:50.840906Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.svm import SVC\n\n# Initialize the model\nsvc_model = SVC(random_state=42)\n\n# Set up the hyperparameters to tune\nparam_grid_svc = {\n    'C': [0.1, 1, 10],  # Example hyperparameters, you can modify as needed\n    'kernel': ['linear', 'rbf'],  # Example kernels to try\n}\n\n# Set up GridSearchCV\ngrid_search_svc = GridSearchCV(estimator=svc_model, param_grid=param_grid_svc, cv=3, scoring='accuracy')\n\n# Fit the model with grid search\ngrid_search_svc.fit(X_train, y_train)\n\n# Get the best model and score\nbest_svc_model = grid_search_svc.best_estimator_\nbest_svc_score = grid_search_svc.best_score_\nbest_params= grid_search.best_params_\n\nprint(f\"Best SVC Model: {best_svc_model}\")\nprint(f\"Best SVC Score: {best_svc_score}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.841827Z","iopub.status.idle":"2025-03-03T14:51:50.842187Z","shell.execute_reply":"2025-03-03T14:51:50.842032Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.linear_model import SGDClassifier\n\n# Initialize the model\nsgd_model = SGDClassifier(random_state=42)\n\n# Set up the hyperparameters to tune\nparam_grid_sgd = {\n    'loss': ['hinge', 'log'],  # Example hyperparameters\n    'penalty': ['l2', 'l1', 'elasticnet'],\n    'max_iter': [1000, 2000]\n}\n\n# Set up GridSearchCV\ngrid_search_sgd = GridSearchCV(estimator=sgd_model, param_grid=param_grid_sgd, cv=3, scoring='accuracy')\n\n# Fit the model with grid search\ngrid_search_sgd.fit(X_train, y_train)\n\n# Get the best model and score\nbest_sgd_model = grid_search_sgd.best_estimator_\nbest_sgd_score = grid_search_sgd.best_score_\n\nprint(f\"Best SGDClassifier Model: {best_sgd_model}\")\nprint(f\"Best SGDClassifier Score: {best_sgd_score}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-03T14:51:50.843012Z","iopub.status.idle":"2025-03-03T14:51:50.843384Z","shell.execute_reply":"2025-03-03T14:51:50.843225Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}